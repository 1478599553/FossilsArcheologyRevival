buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT"
    }
}

apply plugin: "forge"
apply plugin: "maven-publish"

def mod_file = getModFile()
version = getVersion("VERSION", mod_file)
def llibrary_version = getVersion("LLIBRARY_VERSION", mod_file)
group = "fossilsarcheology"
archivesBaseName = "fossilsarcheology"
sourceCompatibility = targetCompatibility = "1.8"

if (System.getenv().BUILD_NUMBER) {
    version = version + "." + "${System.getenv().BUILD_NUMBER}"
}

minecraft {
    version = "1.7.10-10.13.4.1558-1.7.10"
    runDir = "minecraft"
}

jar {
        manifest {
        attributes 'FMLAT': 'fossil_at.cfg'
    }
}

repositories {
    mavenCentral()
    maven {
        name = "ilexiconn"
        url = "http://maven.ilexiconn.net/"
    }
}

dependencies {
    compile "net.ilexiconn:llibrary:$llibrary_version-1.7.10:dev"
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version
    inputs.property "llibrary_version", llibrary_version

    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"
        expand "version": project.version, "mcversion": project.minecraft.version, "llibrary_version": llibrary_version
    }
        
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}

String getVersion(String type, String mod_file) {
    String major = "0";
    String revision = "0";
    String patch = "0";
    String prefix = "public static final String $type = \"";
    File file = file(mod_file)
    file.eachLine { String s ->
        s = s.trim();
        if (s.startsWith(prefix)) {
            s = s.substring(prefix.length(), s.length() - 2);
            String[] pts = s.split("\\.");

            major = pts[0];
            revision = pts[1];
            patch = pts[2];
        }
    }

    return "$major.$revision.$patch";
}

String getModFile() {
    String path = "";
    FileTree tree = fileTree(dir: 'src/main/java')
    tree.include '**/*.java'
    tree.visit {element ->
        if (element.file.isFile()) {
            element.file.eachLine { String s ->
                s = s.trim();
                if (s.startsWith("@Mod")) {
                    path = "src/main/java/$element.relativePath"
                }
            }
        }
    }
    return path;
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId "fossilsarcheology"
            artifactId "fossilsarcheology"
            from components.java
        }
    }
    repositories {
        maven {
            credentials {
                if (System.getenv().PASSWORD) {
                    username System.getenv().USERNAME
                    password System.getenv().PASSWORD
                } else {
                    username ""
                    password ""
                }
            }
            if (System.getenv().PASSWORD) {
                url "sftp://connect.ilexiconn.net:22/home/ilexiconn/maven/"
            } else {
                url "file:///var/www/maven/"
            }
        }
    }
}
